<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE extension SYSTEM "ext-1.0.dtd">
<!--
/**
 * Blog
 *
 * Allows to add a blog to your S2 site
 *
 * @copyright (C) 2007-2013 Roman Parpalak
 * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher
 * @package s2_blog
 */
-->

<extension for="S2" engine="1.0">
	<id>s2_blog</id>
	<title>Blog</title>
	<version>1.0b5</version>
	<description>Adds a blog to your site.</description>
	<author>Roman Parpalak</author>

	<adminaffected>1</adminaffected>

	<minversion>1.0b5</minversion>
	<maxtestedon>1.0b5</maxtestedon>

	<note type="uninstall" timing="pre">Warning! All your posts and user comments will be deleted during the uninstall process. It is strongly recommended you to disable 'Blog' extension instead or to upgrade it without uninstalling.</note>

	<install><![CDATA[
// Setup posts table
if (!$s2_db->table_exists('s2_blog_posts'))
{
	$schema = array(
		'FIELDS'			=> array(
			'id'				=> array(
				'datatype'		=> 'SERIAL',
				'allow_null'	=> false
			),
			'create_time'	=> array(
				'datatype'		=> 'INT(10) UNSIGNED',
				'allow_null'	=> false,
				'default'		=> '0'
			),
			'modify_time'	=> array(
				'datatype'		=> 'INT(10) UNSIGNED',
				'allow_null'	=> false,
				'default'		=> '0'
			),
			'revision'		=> array(
				'datatype'		=> 'INT(10) UNSIGNED',
				'allow_null'	=> false,
				'default'		=> '1'
			),
			'title'			=> array(
				'datatype'		=> 'VARCHAR(255)',
				'allow_null'	=> false,
				'default'		=> '\'\''
			),
			'text'			=> array(
				'datatype'		=> 'LONGTEXT',
				'allow_null'	=> true
			),
			'published'		=> array(
				'datatype'		=> 'TINYINT(1)',
				'allow_null'	=> false,
				'default'		=> '0'
			),
			'favorite'		=> array(
				'datatype'		=> 'TINYINT(1)',
				'allow_null'	=> false,
				'default'		=> '0'
			),
			'commented'		=> array(
				'datatype'		=> 'TINYINT(1)',
				'allow_null'	=> false,
				'default'		=> '1'
			),
			'label'			=> array(
				'datatype'		=> 'VARCHAR(255)',
				'allow_null'	=> false,
				'default'		=> '\'\''
			),
			'url'			=> array(
				'datatype'		=> 'VARCHAR(255)',
				'allow_null'	=> false,
				'default'		=> '\'\''
			),
			'user_id'		=> array(
				'datatype'		=> 'INT(10) UNSIGNED',
				'allow_null'	=> false,
				'default'		=> '0'
			)
		),
		'PRIMARY KEY'	=> array('id'),
		'INDEXES'		=> array(
			'url_idx'					=> array('url'),
			'create_time_idx'			=> array('create_time'),
			'create_time_published_idx'	=> array('create_time', 'published'),
			'id_published_idx'			=> array('id', 'published'),
			'favorite_idx'				=> array('favorite'),
			'label_idx'					=> array('label')
		)
	);

	$s2_db->create_table('s2_blog_posts', $schema);
}
else
{
	$s2_db->add_field('s2_blog_posts', 'revision', 'INT(10) UNSIGNED', false, '1', 'modify_time');
	$s2_db->add_field('s2_blog_posts', 'user_id', 'INT(10) UNSIGNED', false, '0', 'url');
}

// For old installations
$s2_db->add_index('s2_blog_posts', 'create_time_published_idx', array('create_time', 'published'));
$s2_db->add_index('s2_blog_posts', 'id_published_idx', array('id', 'published'));
$s2_db->add_index('s2_blog_posts', 'favorite_idx', array('favorite'));

// Setup blog comments table
if (!$s2_db->table_exists('s2_blog_comments'))
{
	$schema = array(
		'FIELDS'		=> array(
			'id'			=> array(
				'datatype'		=> 'SERIAL',
				'allow_null'	=> false
			),
			'post_id'		=> array(
				'datatype'		=> 'INT(10) UNSIGNED',
				'allow_null'	=> false,
				'default'		=> '0'
			),
			'time'			=> array(
				'datatype'		=> 'INT(10) UNSIGNED',
				'allow_null'	=> false,
				'default'		=> '0'
			),
			'ip'			=> array(
				'datatype'		=> 'VARCHAR(39)',
				'allow_null'	=> false,
				'default'		=> '\'\''
			),
			'nick'			=> array(
				'datatype'		=> 'VARCHAR(50)',
				'allow_null'	=> false,
				'default'		=> '\'\''
			),
			'email'			=> array(
				'datatype'		=> 'VARCHAR(80)',
				'allow_null'	=> false,
				'default'		=> '\'\''
			),
			'show_email'	=> array(
				'datatype'		=> 'TINYINT(1)',
				'allow_null'	=> false,
				'default'		=> '0'
			),
			'subscribed'	=> array(
				'datatype'		=> 'TINYINT(1)',
				'allow_null'	=> false,
				'default'		=> '0'
			),
			'shown'			=> array(
				'datatype'		=> 'TINYINT(1)',
				'allow_null'	=> false,
				'default'		=> '1'
			),
			'sent'			=> array(
				'datatype'		=> 'TINYINT(1)',
				'allow_null'	=> false,
				'default'		=> '1'
			),
			'good'			=> array(
				'datatype'		=> 'TINYINT(1)',
				'allow_null'	=> false,
				'default'		=> '0'
			),
			'text'			=> array(
				'datatype'		=> 'TEXT',
				'allow_null'	=> true
			),
		),
		'PRIMARY KEY'	=> array('id'),
		'INDEXES'		=> array(
			'post_id_idx'	=> array('post_id'),
			'sort_idx'		=> array('post_id', 'time', 'shown'),
			'time_idx'		=> array('time')
		)
	);

	$s2_db->create_table('s2_blog_comments', $schema);
}

// For old installations
$s2_db->add_index('s2_blog_comments', 'sort_idx', array('post_id', 'time', 'shown'));

// Setup table to link posts and tags
if (!$s2_db->table_exists('s2_blog_post_tag'))
{
	$schema = array(
		'FIELDS'		=> array(
			'id'		=> array(
				'datatype'		=> 'SERIAL',
				'allow_null'	=> false
			),
			'post_id'	=> array(
				'datatype'		=> 'INT(10) UNSIGNED',
				'allow_null'	=> false,
				'default'		=> '0'
			),
			'tag_id'	=> array(
				'datatype'		=> 'INT(10) UNSIGNED',
				'allow_null'	=> false,
				'default'		=> '0'
			),
		),
		'PRIMARY KEY'	=> array('id'),
		'INDEXES'		=> array(
			'post_id_idx'		=> array('post_id'),
			'tag_id_idx'		=> array('tag_id'),
		),
	);

	$s2_db->create_table('s2_blog_post_tag', $schema);
}

// Add extension options to the config table
$s2_blog_config = array(
	'S2_BLOG_URL'		=> '/blog',
	'S2_BLOG_TITLE'		=> 'My blog',
	'S2_BLOG_CRUMBS'	=> '<a href="/">Main page</a>',
);

foreach ($s2_blog_config as $conf_name => $conf_value)
{
	if (defined($conf_name))
		continue;

	$query = array(
		'INSERT'	=> 'name, value',
		'INTO'		=> 'config',
		'VALUES'	=> '\''.$conf_name.'\', \''.$conf_value.'\''
	);

	$s2_db->query_build($query) or error(__FILE__, __LINE__);
}

// User permissions
if ($s2_db->field_exists('users', 'edit_s2_blog'))
	$s2_db->drop_field('users', 'edit_s2_blog');

// A field in tags table for important tags displaying
if (!$s2_db->field_exists('tags', 's2_blog_important'))
	$s2_db->add_field('tags', 's2_blog_important', 'INT(1)', false, '0');

$s2_db->add_index('tags', 's2_blog_important_idx', array('s2_blog_important'));

	]]></install>

	<uninstall><![CDATA[
$query = array(
	'DELETE'	=> 'config',
	'WHERE'		=> 'name in (\'S2_BLOG_URL\', \'S2_BLOG_TITLE\', \'S2_BLOG_CRUMBS\')',
);
$s2_db->query_build($query) or error(__FILE__, __LINE__);

$s2_db->drop_table('s2_blog_posts');
$s2_db->drop_table('s2_blog_post_tag');
$s2_db->drop_table('s2_blog_comments');

$s2_db->drop_field('tags', 's2_blog_important');
	]]></uninstall>

	<hooks>

		<hook id="rq_start,ai_start,idx_start"><![CDATA[
define('S2_BLOG_PATH', s2_link(str_replace(urlencode('/'), '/', urlencode(S2_BLOG_URL)).'/'));
define('S2_BLOG_TAGS_PATH', S2_BLOG_PATH.urlencode(S2_TAGS_URL).'/');
		]]></hook>

		<hook id="idx_get_content" priority="9"><![CDATA[
if (substr($request_uri, 0, strlen(S2_BLOG_URL)) == S2_BLOG_URL)
{
	if (file_exists($ext_info['path'].'/lang/'.S2_LANGUAGE.'.php'))
		require $ext_info['path'].'/lang/'.S2_LANGUAGE.'.php';
	else
		require $ext_info['path'].'/lang/English.php';
	if (!defined('S2_BLOG_FUNCTIONS_LOADED'))
		include $ext_info['path'].'/blog_functions.php';
	return include $ext_info['path'].'/main.php';
}
		]]></hook>

		<hook id="idx_pre_get_queries"><![CDATA[
if (strpos($template, '<!-- s2_blog_last_comments -->') !== false)
{
	if (!defined('S2_BLOG_FUNCTIONS_LOADED'))
		include $ext_info['path'].'/blog_functions.php';
	$s2_blog_recent_comments = s2_blog_recent_comments($request_uri);
	$replace['<!-- s2_blog_last_comments -->'] = $s2_blog_recent_comments ? '<div class="header">'.$lang_s2_blog['Last comments'].'</div>'.$s2_blog_recent_comments : '';
}
if (strpos($template, '<!-- s2_blog_last_discussions -->') !== false)
{
	if (!defined('S2_BLOG_FUNCTIONS_LOADED'))
		include $ext_info['path'].'/blog_functions.php';
	$s2_blog_last_discussions = s2_blog_recent_discussions($request_uri);
	$replace['<!-- s2_blog_last_discussions -->'] = $s2_blog_last_discussions ? '<div class="header">'.$lang_s2_blog['Last discussions'].'</div>'.$s2_blog_last_discussions : '';
}
if (strpos($template, '<!-- s2_blog_last_post -->') !== false)
{
	if (!defined('S2_BLOG_FUNCTIONS_LOADED'))
		include $ext_info['path'].'/blog_functions.php';
	$replace['<!-- s2_blog_last_post -->'] = s2_blog_last_post(1);
}
$replace['<!-- s2_blog_calendar -->'] = !empty($page['s2_blog_calendar']) ? $page['s2_blog_calendar'] : '';
		]]></hook>

		<hook id="fn_tagged_articles_pre_get_tags_qr"><![CDATA[
$subquery = array(
	'SELECT'	=> 'p.id',
	'FROM'		=> 's2_blog_posts AS p',
	'JOINS'		=> array(
		array(
			'INNER JOIN'	=> 's2_blog_post_tag AS pt',
			'ON'			=> 'p.id = pt.post_id'
		)
	),
	'WHERE'		=> 'pt.tag_id = atg.tag_id AND p.published = 1',
	'LIMIT'		=> '1'
);
$raw_query = $s2_db->query_build($subquery, true) or error(__FILE__, __LINE__);

$query['SELECT'] .= ', ('.$raw_query.') IS NOT NULL as s2_blog_is_posts';

$s2_blog_links = array();
		]]></hook>

		<hook id="fn_tagged_articles_loop_get_tags"><![CDATA[
if ($row['s2_blog_is_posts'])
	$s2_blog_links[] = '<a href="'.S2_BLOG_TAGS_PATH.urlencode($row['url']).'/">'.$row['name'].'</a>';
		]]></hook>

		<hook id="fn_tagged_articles_end"><![CDATA[
// Links to blog tags
if (!empty($s2_blog_links))
{
	if (file_exists($ext_info['path'].'/lang/'.S2_LANGUAGE.'.php'))
		require $ext_info['path'].'/lang/'.S2_LANGUAGE.'.php';
	else
		require $ext_info['path'].'/lang/English.php';
	$output[] = '<div class="header">'.$lang_s2_blog['See in blog'].'</div>'.implode(', ', $s2_blog_links);
}
		]]></hook>

		<hook id="ai_head_end"><![CDATA[
echo '<link rel="stylesheet" type="text/css" href="'.$ext_info['url'].'/admin.css" />'."\n";
		]]></hook>

		<hook id="ai_after_js_include"><![CDATA[
echo '<script type="text/javascript" src="'.$ext_info['url'].'/blog.js"></script>'."\n";
		]]></hook>

		<hook id="rq_custom_action"><![CDATA[
require $ext_info['path'].'/blog_ajax.php';
		]]></hook>

		<hook id="ai_pre_edit"><![CDATA[
if (file_exists($ext_info['path'].'/lang/'.S2_LANGUAGE.'.php'))
	require $ext_info['path'].'/lang/'.S2_LANGUAGE.'.php';
else
	require $ext_info['path'].'/lang/English.php';
require $ext_info['path'].'/blog_lib.php';
?>
		<dt id="blog_tab"><?php echo $lang_s2_blog['Blog']; ?></dt>
		<dd class="inactive">
			<div class="reducer">
				<form name="blogform">
					<table width="100%" class="fields">
						<tr>
							<td class="label"><?php echo $lang_s2_blog['Start time']; ?></td>
							<td><input style="width: 10em;" type="text" name="posts[start_time]" size="20" value="" /></td>
							<td class="label"><?php echo $lang_s2_blog['Search label']; ?></td>
							<td><input type="text" name="posts[text]" size="40" value="" /></td>
							<td align="right"><input class="bitbtn add_post" name="button" type="button" value="<?php echo $lang_s2_blog['Create new']; ?>" onclick="return CreateBlankRecord();" /></td>
						</tr>
						<tr>
							<td class="label"><?php echo $lang_s2_blog['End time']; ?></td>
							<td><input style="width: 10em;" type="text" name="posts[end_time]" size="20" value="<?php echo date($lang_s2_blog['Date pattern']); ?>" /></td>
							<td class="label"><?php echo $lang_s2_blog['Tag label']; ?></td>
							<td><input type="text" name="posts[key]" size="40" value="" /></td>
							<td></td>
						</tr>
						<tr>
							<td class="label"><?php echo $lang_s2_blog['Author']; ?></td>
							<td><input style="width: 10em;" type="text" name="posts[author]" size="20" value="" /></td>
							<td style="padding-left: 0.5em;"><label><input type="checkbox" name="posts[hidden]" value="1" checked="checked" /><?php echo $lang_s2_blog['Only hidden']; ?></label></td>
							<td><input name="button" type="submit" value="<?php echo $lang_s2_blog['Show posts']; ?>" onclick="return LoadPosts();" /></td>
							<td></td>
						</tr>
					</table>
				</form>
				<div id="blog_div"><?php s2_blog_output_post_list(array('hidden' => 1)); ?></div>
			</div>
		</dd>
<?php
		]]></hook>

		<hook id="fn_output_tag_form_pre_url"><![CDATA[
if (file_exists($ext_info['path'].'/lang/'.S2_LANGUAGE.'.php'))
	require $ext_info['path'].'/lang/'.S2_LANGUAGE.'.php';
else
	require $ext_info['path'].'/lang/English.php';
?>
		<label for="s2_blog_important_tag" title="<?php echo $lang_s2_blog['Important tag info']; ?>">
			<input type="checkbox" id="s2_blog_important_tag" name="tag[s2_blog_important]" value="1"<?php if (!empty($tag['s2_blog_important'])) echo ' checked="checked"' ?> />
			<?php echo $lang_s2_blog['Important tag']; ?>
		</label>
		<hr />
<?php
		]]></hook>

		<hook id="fn_load_tag_pre_qr"><![CDATA[
$query['SELECT'] .= ', s2_blog_important';
		]]></hook>

		<hook id="fn_delete_tag_end"><![CDATA[
$query = array(
	'DELETE'	=> 's2_blog_post_tag',
	'WHERE'		=> 'tag_id = '.$id,
);
($hook = s2_hook('blrq_action_delete_tag_pre_del_links_qr')) ? eval($hook) : null;
$s2_db->query_build($query) or error(__FILE__, __LINE__);
		]]></hook>

		<hook id="fn_save_tag_pre_id_check"><![CDATA[
$s2_blog_important = isset($_POST['tag']['s2_blog_important']) ? (int) $_POST['tag']['s2_blog_important'] : 0;
		]]></hook>

		<hook id="fn_save_tag_pre_upd_qr"><![CDATA[
$query['SET'] .= ', s2_blog_important = '.$s2_blog_important;
		]]></hook>

		<hook id="fn_save_tag_pre_ins_qr"><![CDATA[
$query['INSERT'] .= ', s2_blog_important';
$query['VALUES'] .= ', \''.$s2_blog_important.'\'';
		]]></hook>

		<hook id="fn_output_tag_form_pre_get_tags_qr"><![CDATA[
$subquery = array(
	'SELECT'	=> 'count(*)',
	'FROM'		=> 's2_blog_post_tag AS pt',
	'WHERE'		=> 't.tag_id = pt.tag_id'
);
$raw_query = $s2_db->query_build($subquery, true) or error(__FILE__, __LINE__);
$query['SELECT'] .= ', ('.$raw_query.') AS post_count';
		]]></hook>

		<hook id="fn_output_tag_form_loop_get_tags_qr"><![CDATA[
$info .= '/'.$row['post_count'];
		]]></hook>

		<hook id="fn_save_comment_end"><![CDATA[
if ($type == 'blog')
{
	// Does the comment exist?
	// We need post id for displaying comments
	$query = array(
		'SELECT'	=> 'post_id',
		'FROM'		=> 's2_blog_comments',
		'WHERE'		=> 'id = '.$id
	);
	($hook = s2_hook('blfn_save_comment_pre_get_pid_qr')) ? eval($hook) : null;
	$result = $s2_db->query_build($query) or error(__FILE__, __LINE__);

	if ($row = $s2_db->fetch_row($result))
		$post_id = $row[0];
	else
		die('Comment not found!');

	// Save comment
	$query = array(
		'UPDATE'	=> 's2_blog_comments',
		'SET'		=> "nick = '$nick', email = '$email', text = '$text', show_email = '$show_email', subscribed = '$subscribed'",
		'WHERE'		=> 'id = '.$id
	);
	($hook = s2_hook('blfn_save_comment_pre_upd_qr')) ? eval($hook) : null;
	$s2_db->query_build($query) or error(__FILE__, __LINE__);

	global $lang_s2_blog;
	if (file_exists($ext_info['path'].'/lang/'.S2_LANGUAGE.'.php'))
		require $ext_info['path'].'/lang/'.S2_LANGUAGE.'.php';
	else
		require $ext_info['path'].'/lang/English.php';

	$article_id = $post_id;
}
		]]></hook>

		<hook id="fn_show_comments_end"><![CDATA[
if ($mode == 'hidden' || $mode == 'new' || $mode == 'last')
{
	global $lang_s2_blog;
	if (file_exists($ext_info['path'].'/lang/'.S2_LANGUAGE.'.php'))
		require $ext_info['path'].'/lang/'.S2_LANGUAGE.'.php';
	else
		require $ext_info['path'].'/lang/English.php';
	$output .= s2_show_comments('s2_blog_'.$mode);
}
		]]></hook>

		<hook id="fn_show_comments_pre_get_comm_qr"><![CDATA[
if (strpos($mode, 's2_blog') === 0)
{
	global $lang_s2_blog;

	$query = array(
		'SELECT'	=> 'p.title, c.post_id AS article_id, c.id, c.time, c.nick, c.email, c.show_email, c.subscribed, c.text, c.shown, c.good, c.ip',
		'FROM'		=> 's2_blog_comments AS c',
		'JOINS'		=> array(
			array(
				'INNER JOIN'	=> 's2_blog_posts AS p',
				'ON'			=> 'p.id = c.post_id'
			)
		),
		'WHERE'		=> 'c.post_id = '.$id,
		'ORDER BY'	=> 'time'
	);

	$output = '';
	if ($mode == 's2_blog_hidden')
	{
		// Show all hidden commetns
		$query['WHERE'] = 'shown = 0';
		$output = '<h2>'.$lang_s2_blog['Blog hidden comments'].'</h2>';
	}
	elseif ($mode == 's2_blog_new')
	{
		// Show unverified commetns
		$query['WHERE'] = 'shown = 0 AND sent = 0';
		$output = '<h2>'.$lang_s2_blog['Blog new comments'].'</h2>';
	}
	elseif ($mode == 's2_blog_last')
	{
		// Show last 20 commetns
		unset($query['WHERE']);
		$query['ORDER BY'] = 'time DESC';
		$query['LIMIT'] = '20';
		$output = '<h2>'.$lang_s2_blog['Blog last comments'].'</h2>';
	}
}
		]]></hook>

		<hook id="fn_show_comments_pre_table_row_merge"><![CDATA[
if (strpos($mode, 's2_blog') === 0)
{
	$s2_blog_replace = array(
		'DeleteComment' => 'DeleteBlogComment',
		'edit_comment' => 'edit_blog_comment',
		'mark_comment' => 'mark_blog_comment',
		'hide_comment' => 'hide_blog_comment',
		'\'s2_blog_' => '\'',
	);
	$buttons = strtr($buttons, $s2_blog_replace);
}
		]]></hook>

		<hook id="fn_show_comments_after_table_merge"><![CDATA[
if ($mode == 's2_blog_new' && count($article_titles))
	$output .= '<div class="info-box"><p>'.$lang_admin['Premoderation info'].'</p></div>';
		]]></hook>

		<hook id="fn_show_comments_pre_output_merge"><![CDATA[
if (strpos($mode, 's2_blog') === 0)
{
	$output_header = str_replace('EditArticle', 'EditRecord', $output_header);
	$output_subheader = $mode == 's2_blog' ? '' : str_replace('LoadComments', 'LoadBlogComments', $output_subheader);
}
		]]></hook>

		<hook id="opt_start"><![CDATA[
$s2_const_types['S2_BLOG_URL'] = 'string';
$s2_const_types['S2_BLOG_TITLE'] = 'string';
$s2_const_types['S2_BLOG_CRUMBS'] = 'string';
		]]></hook>

		<hook id="fn_get_options_pre_comment_fs"><![CDATA[
if (file_exists($ext_info['path'].'/lang/'.S2_LANGUAGE.'.php'))
	require $ext_info['path'].'/lang/'.S2_LANGUAGE.'.php';
else
	require $ext_info['path'].'/lang/English.php';
$fieldset = array(
	'S2_BLOG_TITLE' => s2_get_input('S2_BLOG_TITLE', $options['S2_BLOG_TITLE'], $lang_s2_blog['Blog title'], $lang_s2_blog['Blog title label']),
	'S2_BLOG_URL' => s2_get_input('S2_BLOG_URL', $options['S2_BLOG_URL'], $lang_s2_blog['Blog URL'], $lang_s2_blog['Blog URL label']),
	'S2_BLOG_CRUMBS' => s2_get_input('S2_BLOG_CRUMBS', $options['S2_BLOG_CRUMBS'], $lang_s2_blog['Blog crumbs'], $lang_s2_blog['Blog crumbs label']),
);
($hook = s2_hook('s2_blog_opt_pre_blog_fs_merge')) ? eval($hook) : null;
$output .= '<fieldset><legend>'.$lang_s2_blog['Blog'].'</legend>'.implode('', $fieldset).'</fieldset>';
		]]></hook>

		<hook id="fn_get_counters_end"><![CDATA[
if (file_exists($ext_info['path'].'/lang/'.S2_LANGUAGE.'.php'))
	require $ext_info['path'].'/lang/'.S2_LANGUAGE.'.php';
else
	require $ext_info['path'].'/lang/English.php';

$query = array(
	'SELECT'	=> 'count(*)',
	'FROM'		=> 's2_blog_posts',
	'WHERE'		=> 'published = 1'
);
($hook = s2_hook('blfn_get_counters_pre_get_posts_qr')) ? eval($hook) : null;
$result = $s2_db->query_build($query) or error(__FILE__, __LINE__);

$counters[] = sprintf($lang_s2_blog['Blog posts now'], $s2_db->result($result));

$query = array(
	'SELECT'	=> 'count(*)',
	'FROM'		=> 's2_blog_comments AS c',
	'JOINS'		=> array(
		array(
			'INNER JOIN'	=> 's2_blog_posts AS p',
			'ON'			=> 'p.id = c.post_id'
		)
	),
	'WHERE'		=> 'c.shown = 1 AND p.published = 1'
);
($hook = s2_hook('blfn_get_counters_pre_get_comm_qr')) ? eval($hook) : null;
$result = $s2_db->query_build($query) or error(__FILE__, __LINE__);

$counters[] = sprintf($lang_s2_blog['Blog comments now'], $s2_db->result($result));

		]]></hook>

		<hook id="fn_for_premoderation_pre_comm_check"><![CDATA[
// Check if there are new comments
$query = array(
	'SELECT'	=> 'count(id)',
	'FROM'		=> 's2_blog_comments',
	'WHERE'		=> 'shown = 0 AND sent = 0'
);
($hook = s2_hook('blfn_for_premoderation_pre_comm_check_qr')) ? eval($hook) : null;
$result = $s2_db->query_build($query) or error(__FILE__, __LINE__);
$new_comment_count += $s2_db->result($result);
		]]></hook>

		<hook id="fn_preload_editor_start"><![CDATA[
if (!empty($_GET['path']) && ($_GET['path'] == S2_BLOG_URL.'/' || $_GET['path'] == S2_BLOG_URL))
{
	echo 'document.location.hash = "#blog";';
	return true;
}
elseif (!empty($_GET['path']) && substr($_GET['path'], 0, strlen(S2_BLOG_URL)) == S2_BLOG_URL)
{
	$path = substr($_GET['path'], strlen(S2_BLOG_URL));
	$path = explode('/', $path);   //   []/[2006]/[12]/[31]/[newyear]
	if (count($path) < 5)
		return true;

	$start_time = mktime(0, 0, 0, $path[2], $path[3], $path[1]);
	$end_time = mktime(0, 0, 0, $path[2], $path[3]+1, $path[1]);

	$query = array (
		'SELECT'	=> 'id',
		'FROM'		=> 's2_blog_posts',
		'WHERE'		=> 'create_time < '.$end_time.' AND create_time >= '.$start_time.' AND url=\''.$s2_db->escape($path[4]).'\''
	);
	($hook = s2_hook('blfn_preload_editor_loop_pre_get_post_qr')) ? eval($hook) : null;
	$result = $s2_db->query_build($query) or error(__FILE__, __LINE__);

	if ($row = $s2_db->fetch_assoc($result))
		echo 'document.location.hash = "#edit";'."\n".'setTimeout(function () { EditRecord('.$row['id'].'); }, 0);'."\n";

	($hook = s2_hook('blfn_preload_editor_end')) ? eval($hook) : null;

	return true;
}
		]]></hook>

		<hook id="cmnt_pre_get_page_info_qr"><![CDATA[
if (isset($_GET['type']) && $_GET['type'] == 's2_blog')
	$query = array(
		'SELECT'	=> 'create_time, url, title, 0 AS parent_id',
		'FROM'		=> 's2_blog_posts',
		'WHERE'		=> 'id = '.$id.' AND published = 1 AND commented = 1'
	);
		]]></hook>

		<hook id="cmnt_pre_path_check"><![CDATA[
if (isset($_GET['type']) && $_GET['type'] == 's2_blog')
	$path = str_replace(urlencode('/'), '/', urlencode(S2_BLOG_URL)).date('/Y/m/d', $row['create_time']);
		]]></hook>

		<hook id="cmnt_pre_save_comment_qr"><![CDATA[
if (isset($_GET['type']) && $_GET['type'] == 's2_blog')
{
	$query['INSERT'] = 'post_id, time, ip, nick, email, show_email, subscribed, sent, shown, good, text';
	$query['INTO'] = 's2_blog_comments';
}
		]]></hook>

		<hook id="cmnt_pre_get_subscribers_qr"><![CDATA[
if (isset($_GET['type']) && $_GET['type'] == 's2_blog')
	$query = array(
		'SELECT'	=> 'id, nick, email, ip, time',
		'FROM'		=> 's2_blog_comments',
		'WHERE'		=> 'post_id = '.$id.' AND subscribed = 1 AND shown = 1 AND email <> \''.$s2_db->escape($email).'\''
	);
		]]></hook>

		<hook id="cmnt_pre_send_mail"><![CDATA[
if (isset($_GET['type']) && $_GET['type'] == 's2_blog')
	$unsubscribe_link = str_replace('unsubscribe', 'blog_unsubscribe', $unsubscribe_link);
		]]></hook>

		<hook id="cmnt_pre_get_comment_count_qr"><![CDATA[
if (isset($_GET['type']) && $_GET['type'] == 's2_blog')
	$query = array(
		'SELECT'	=> 'count(id)',
		'FROM'		=> 's2_blog_comments',
		'WHERE'		=> 'post_id = '.$id.' AND shown = 1'
	);
		]]></hook>

		<hook id="cmnt_start"><![CDATA[
if (isset($_GET['blog_unsubscribe']))
{
	header('X-Powered-By: S2/'.S2_VERSION);
	header('Content-Type: text/html; charset=utf-8');

	if (isset($_GET['id']) && isset($_GET['mail']))
	{
		$query = array(
			'SELECT'	=> 'id, nick, email, ip, time',
			'FROM'		=> 's2_blog_comments',
			'WHERE'		=> 'post_id = '.intval($_GET['id']).' and subscribed = 1 and email = \''.$s2_db->escape($_GET['mail']).'\''
		);
		($hook = s2_hook('blcmnt_unsubscribe_pre_get_receivers_qr')) ? eval($hook) : null;
		$result = $s2_db->query_build($query) or error(__FILE__, __LINE__);

		$found = false;
		while ($receiver = $s2_db->fetch_assoc($result))
			if ($_GET['blog_unsubscribe'] == base_convert(substr(md5($receiver['id'].$receiver['ip'].$receiver['nick'].$receiver['email'].$receiver['time']), 0, 16), 16, 36))
				$found = true;

		if ($found)
		{
			$query = array(
				'UPDATE'	=> 's2_blog_comments',
				'SET'		=> 'subscribed = 0',
				'WHERE'		=> 'post_id = '.intval($_GET['id']).' and subscribed = 1 and email = \''.$s2_db->escape($_GET['mail']).'\''
			);
			($hook = s2_hook('blcmnt_unsubscribe_pre_upd_qr')) ? eval($hook) : null;
			$result = $s2_db->query_build($query) or error(__FILE__, __LINE__);

			$template = s2_get_service_template();
			$replace = array(
				'<!-- s2_head_title -->'	=> $lang_comments['Unsubscribed OK'],
				'<!-- s2_title -->'			=> '<h1>'.$lang_comments['Unsubscribed OK'].'</h1>',
				'<!-- s2_text -->'			=> $lang_comments['Unsubscribed OK info'],
				'<!-- s2_debug -->'			=> defined('S2_SHOW_QUERIES') ? s2_get_saved_queries() : '',
			);

			($hook = s2_hook('cmnt_pre_unsubscribed_output')) ? eval($hook) : null;

			foreach ($replace as $what => $to)
				$template = str_replace($what, $to, $template);

			$s2_db->close();

			die($template);
		}
	}

	$template = s2_get_service_template();
	$replace = array(
		'<!-- s2_head_title -->'	=> $lang_comments['Unsubscribed failed'],
		'<!-- s2_title -->'			=> '<h1>'.$lang_comments['Unsubscribed failed'].'</h1>',
		'<!-- s2_text -->'			=> $lang_comments['Unsubscribed failed info'],
		'<!-- s2_debug -->'			=> defined('S2_SHOW_QUERIES') ? s2_get_saved_queries() : '',
	);

	($hook = s2_hook('cmnt_pre_unsubscribed_output')) ? eval($hook) : null;

	foreach ($replace as $what => $to)
		$template = str_replace($what, $to, $template);

	$s2_db->close();

	die($template);
}
		]]></hook>

		<hook id="fn_comment_form_pre_output"><![CDATA[
if (defined('S2_BLOG_HANDLED') || isset($_GET['type']) && $_GET['type'] == 's2_blog')
	$action = S2_BASE_URL.'/comment.php?type=s2_blog';
		]]></hook>

		<hook id="idx_pre_rss"><![CDATA[
if ($request_uri == S2_BLOG_URL.'/rss.xml')
{
	if (file_exists($ext_info['path'].'/lang/'.S2_LANGUAGE.'.php'))
		require $ext_info['path'].'/lang/'.S2_LANGUAGE.'.php';
	else
		require $ext_info['path'].'/lang/English.php';
	if (!defined('S2_BLOG_FUNCTIONS_LOADED'))
		include $ext_info['path'].'/blog_functions.php';
	if (!defined('S2_RSS_FUNCTIONS_LOADED'))
		require S2_ROOT.'_include/rss.php';
	s2_no_cache(false);
	s2_do_rss();

	$s2_db->close();
	die;
}
		]]></hook>

		<hook id="fn_do_rss_pre_output"><![CDATA[
if ($request_uri == S2_BLOG_URL.'/rss.xml')
{
	global $lang_s2_blog;

	$rss_title = S2_BLOG_TITLE;
	$rss_link = s2_abs_link(str_replace(urlencode('/'), '/', urlencode(S2_BLOG_URL)).'/');
	$rss_description = sprintf($lang_s2_blog['RSS description'], S2_BLOG_TITLE);
}
		]]></hook>

		<hook id="fn_do_rss_pre_get_articles"><![CDATA[
if ($request_uri == S2_BLOG_URL.'/rss.xml')
{
	$s2_blog_posts = s2_blog_last_posts_array();
	$s2_blog_items = array();
	foreach ($s2_blog_posts as $s2_blog_post)
		$s2_blog_items[] = array(
			'title'			=> $s2_blog_post['title'],
			'text'			=> $s2_blog_post['text'].(!empty($s2_blog_post['tags']) ? '<p>'.sprintf($lang_s2_blog['Tags:'], $s2_blog_post['tags']).'</p>' : ''),
			'time'			=> $s2_blog_post['create_time'],
			'modify_time'	=> $s2_blog_post['modify_time'],
			'rel_path'		=> str_replace(urlencode('/'), '/', urlencode(S2_BLOG_URL)).date('/Y/m/d/', $s2_blog_post['create_time']).urlencode($s2_blog_post['url']),
			'author'		=> $s2_blog_post['author'],
		);
	return $s2_blog_items;
}
		]]></hook>

		<hook id="idx_pre_meta_merge"><![CDATA[
if (!isset($lang_s2_blog))
{
	if (file_exists($ext_info['path'].'/lang/'.S2_LANGUAGE.'.php'))
		require $ext_info['path'].'/lang/'.S2_LANGUAGE.'.php';
	else
		require $ext_info['path'].'/lang/English.php';
}
if (defined('S2_BLOG_HANDLED'))
	$meta_tags[] = '<link rel="alternate" type="application/rss+xml" title="'.$lang_s2_blog['RSS link title'].'" href="'.s2_link(str_replace(urlencode('/'), '/', urlencode(S2_BLOG_URL)).'/rss.xml').'" />';
		]]></hook>

		<hook id="fn_s2_count_rss_count_start"><![CDATA[
global $request_uri;
if ($request_uri == S2_BLOG_URL.'/rss.xml')
	$filename = '/data/rss_s2_blog.txt';
		]]></hook>

		<hook id="s2_search_action_makeindex"><![CDATA[
if ($save_action == 'save_blog_' && $id)
	$chapter = 's2_blog_'.$id;
		]]></hook>

		<hook id="s2_search_fetcher_process_end"><![CDATA[
global $s2_db;
$query = array (
	'SELECT'	=> 'id, title, text, create_time, url',
	'FROM'		=> 's2_blog_posts',
	'WHERE'		=> 'published = 1'
);
($hook = s2_hook('s2_blog_pre_index_fetch')) ? eval($hook) : null;
$result = $s2_db->query_build($query) or error(__FILE__, __LINE__);
while ($s2_blog_post = $s2_db->fetch_assoc($result))
{
	$indexer->buffer_chapter('s2_blog_'.$s2_blog_post['id'], $s2_blog_post['title'], $s2_blog_post['text'], '', '', $s2_blog_post['create_time'], str_replace(urlencode('/'), '/', urlencode(S2_BLOG_URL)).date('/Y/m/d', $s2_blog_post['create_time']).'/'.$s2_blog_post['url']);
}
		]]></hook>

		<hook id="s2_search_fetcher_chapter_start"><![CDATA[
if (substr($id, 0, 8) == 's2_blog_')
{
	$query = array (
		'SELECT'	=> 'id, title, text, create_time, url',
		'FROM'		=> 's2_blog_posts',
		'WHERE'		=> 'published = 1 AND id = '.intval(substr($id, 8)),
	);
	($hook = s2_hook('s2_blog_pre_get_chapter_qr')) ? eval($hook) : null;
	$result = $s2_db->query_build($query) or error(__FILE__, __LINE__);
	$s2_blog_post = $s2_db->fetch_assoc($result);
	if (!$s2_blog_post)
		return array();

	return array(
		$s2_blog_post['title'],
		$s2_blog_post['text'],
		'',
		array(
			'title'		=> $s2_blog_post['title'],
			'descr'		=> '',
			'time'		=> $s2_blog_post['create_time'],
			'url'		=> str_replace(urlencode('/'), '/', urlencode(S2_BLOG_URL)).date('/Y/m/d', $s2_blog_post['create_time']).'/'.$s2_blog_post['url'],
		)
	);
}
		]]></hook>

		<hook id="s2_search_fetcher_texts_start"><![CDATA[
$s2_blog_ids = array();
foreach ($ids as $k => $v)
	if (substr($v, 0, 8) == 's2_blog_')
	{
		unset($ids[$k]);
		$s2_blog_ids[] = (int) substr($v, 8);
	}

if (count($s2_blog_ids))
{
	$query = array (
		'SELECT'	=> 'id, text',
		'FROM'		=> 's2_blog_posts',
		'WHERE'		=> 'published = 1 AND id IN ('.implode(', ', $s2_blog_ids).')',
	);
	($hook = s2_hook('s2_blog_pre_get_snippets_qr')) ? eval($hook) : null;
	$result = $s2_db->query_build($query) or error(__FILE__, __LINE__);
	while ($s2_blog_post = $s2_db->fetch_assoc($result))
		$articles['s2_blog_'.$s2_blog_post['id']] = $s2_blog_post['text'];
}
		]]></hook>

		<hook id="s2_search_find_tags_pre_mrg"><![CDATA[
if (!isset($lang_s2_blog))
{
	if (file_exists($ext_info['path'].'/lang/'.S2_LANGUAGE.'.php'))
		require $ext_info['path'].'/lang/'.S2_LANGUAGE.'.php';
	else
		require $ext_info['path'].'/lang/English.php';
}

$s2_blog_search_sql = array(
	'SELECT'	=> 'count(*)',
	'FROM'		=> 's2_blog_post_tag AS pt',
	'JOINS'		=> array(
		array(
			'INNER JOIN'	=> 's2_blog_posts AS p',
			'ON'			=> 'p.id = pt.post_id'
		)
	),
	'WHERE'		=> 'pt.tag_id = t.tag_id AND p.published = 1',
	'LIMIT'		=> '1'
);
($hook = s2_hook('s2_blog_pre_find_tags_sub_qr')) ? eval($hook) : null;
$s2_blog_search_sub_sql = $s2_db->query_build($s2_blog_search_sql, true) or error(__FILE__, __LINE__);

$s2_blog_search_sql = array(
	'SELECT'	=> 'tag_id, name, url, ('.$s2_blog_search_sub_sql.') AS used',
	'FROM'		=> 'tags AS t',
	'WHERE'		=> 'name LIKE \''.$s2_db->escape(trim($s2_search_query)).'%\'',
);
($hook = s2_hook('s2_blog_pre_find_tags_qr')) ? eval($hook) : null;
$s2_blog_result = $s2_db->query_build($s2_blog_search_sql) or error(__FILE__, __LINE__);

$s2_blog_found_tag = array();
while ($s2_blog_row = $s2_db->fetch_assoc($s2_blog_result))
{
	($hook = s2_hook('s2_blog_find_tags_get_res')) ? eval($hook) : null;

	if ($s2_blog_row['used'])
		$s2_blog_found_tag[] = '<a href="'.S2_BLOG_TAGS_PATH.urlencode($s2_blog_row['url']).'/">'.$s2_blog_row['name'].'</a>';
}

if (!empty($s2_blog_found_tag))
{
	$s2_blog_search_found = count($s2_search_found_tags);
	if ($s2_blog_search_found)
		$s2_search_found_tags[$s2_blog_search_found - 1] .= sprintf($lang_s2_blog['Found tags short'], implode(', ', $s2_blog_found_tag));
	else
		echo '<p class="s2_search_found_tags">'.sprintf($lang_s2_blog['Found tags'], implode(', ', $s2_blog_found_tag)).'</p>';
}
		]]></hook>

	</hooks>
</extension>
