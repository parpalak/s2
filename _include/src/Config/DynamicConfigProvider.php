<?php
/**
 * @copyright 2024-2025 Roman Parpalak
 * @license   https://opensource.org/license/mit MIT
 * @package   S2
 */

declare(strict_types=1);

namespace S2\Cms\Config;

use S2\Cms\Framework\Exception\ConfigurationException;
use S2\Cms\Framework\StatefulServiceInterface;
use S2\Cms\Pdo\DbLayer;
use S2\Cms\Pdo\DbLayerException;

class DynamicConfigProvider implements StatefulServiceInterface
{
    private ?array $params = null;

    public function __construct(
        private readonly DbLayer $dbLayer,
        private readonly string  $fileName,
        private readonly bool    $disableCache,
    ) {
    }

    public function clearState(): void
    {
        $this->params = null;
    }

    /**
     * @throws DbLayerException
     */
    public function get(string $paramName): mixed
    {
        $this->ensureParamsAreLoaded();

        if (!isset($this->params[$paramName])) {
            throw new \LogicException(\sprintf('Param "%s" does not exist.', $paramName));
        }

        return $this->params[$paramName];
    }

    /**
     * @throws DbLayerException
     */
    public function regenerate(): void
    {
        $config       = $this->fetchConfig();
        $this->params = $config;

        if ($this->disableCache) {
            return;
        }

        try {
            s2_overwrite_file_skip_locked(
                $this->fileName,
                "<?php\n\n// This file is automatically generated by S2. Do not edit!\n\nreturn " . var_export($config, true) . ';'
            );
        } catch (\RuntimeException $e) {
            throw new ConfigurationException(\sprintf(
                'Unable to write configuration cache file to cache directory. Please make sure PHP has write access to the file "%s" in the directory "%s".',
                basename($this->fileName),
                \dirname($this->fileName)
            ), null, $e);
        }
    }

    /**
     * @throws DbLayerException
     */
    private function ensureParamsAreLoaded(): void
    {
        if ($this->params !== null) {
            return;
        }

        $data = @include $this->fileName;
        if (\is_array($data)) {
            $this->params = $data;
            return;
        }

        $this->regenerate();
    }

    /**
     * Get the config from the DB
     *
     * @throws DbLayerException
     */
    private function fetchConfig(): array
    {
        $query = [
            'SELECT' => 'c.*',
            'FROM'   => 'config AS c'
        ];

        $statement = $this->dbLayer->buildAndQuery($query);

        $result = [];
        while ($row = $this->dbLayer->fetchRow($statement)) {
            $result[$row[0]] = $row[1];
        }
        return $result;
    }
}
